const pkg = require("./package.json");
const fs = require("fs");
const path = require('path');

const defaultOptions = {
  defaultRelativePath: "notebook.ipynb",
};

const TMP_DIR = "jnbgen";

const MIME_IMG_EXT = {
  "image/bmp": ".bmp",
  "image/gif": ".gif",
  "image/jpeg": ".jpeg",
  "image/png": ".png",
  "image/svg+xml": ".svg",
};

module.exports = function (eleventyConfig, options = {}) {
  try {
    eleventyConfig.versionCheck(pkg["11ty"].compatibility);
  } catch (e) {
    console.log(`WARN: Eleventy Plugin (${pkg.name}) Compatibility: ${e.message}`);
  }

  options = {
    ...defaultOptions,
    ...options,
  };

  eleventyConfig.on("eleventy.after", async ({ dir, results, runMode, outputMode }) => {
    const tmpdir = path.join(dir.input, TMP_DIR);
    // Run me after the build ends
    if (fs.existsSync(tmpdir)) {
      fs.rmSync(tmpdir, { recursive: true, force: true });
    }
  });

  eleventyConfig.addShortcode("jnbsrc", async function (tag) {
    return readSourceForTag(tag, path.dirname(this.page.inputPath), options.defaultRelativePath);
  });

  eleventyConfig.addShortcode("jnbsrc", async function (tag, relativePath) {
    if (relativePath === undefined) {
      relativePath = defaultOptions.defaultRelativePath;
    }
    return readSourceForTag(tag, path.dirname(this.page.inputPath), relativePath);
  });

  eleventyConfig.addShortcode("jnbsrcout", async function (tag, relativePath) {
    if (relativePath === undefined) {
      relativePath = defaultOptions.defaultRelativePath;
    }
    var src = readSourceForTag(tag, path.dirname(this.page.inputPath), relativePath);
    var output = readTextOutputForTag(tag, path.dirname(this.page.inputPath), relativePath);
    return wrapCell(src, output, "jnbcell");
  });

  eleventyConfig.addShortcode("jnbout", async function (tag, relativePath) {
    if (relativePath === undefined) {
      relativePath = defaultOptions.defaultRelativePath;
    }
    return readTextOutputForTag(tag, path.dirname(this.page.inputPath), relativePath);
  });

  eleventyConfig.addShortcode("jnbsrcimg", async function (tag, altText, caption, relativePath) {
    if (relativePath === undefined) {
      relativePath = defaultOptions.defaultRelativePath;
    }
    var src = readSourceForTag(tag, path.dirname(this.page.inputPath), relativePath);
    var output = readImageOutputForTag(tag, altText, caption, path.dirname(this.page.inputPath), relativePath, this.eleventy.directories.input);
    return wrapCell(
      src, output, "jnbcell"
    );
  });

  eleventyConfig.addShortcode("jnbimg", async function (tag, altText, caption, relativePath) {
    if (relativePath === undefined) {
      relativePath = defaultOptions.defaultRelativePath;
    }
    return readImageOutputForTag(tag, altText, caption, path.dirname(this.page.inputPath), relativePath, this.eleventy.directories.input)
  });
  eleventyConfig.watchIgnores.add(path.join(eleventyConfig.dir.input, TMP_DIR));
};

function wrapCell(src, output, classes) {
  return `<div class="${classes}">
<div class="jnbsrc">

${src}

</div>

<div class="jnbout">

${output}

</div>
</div>
`
}

function readSourceForTag(tag, dirname, relativePath) {
  const inputPath = path.join(dirname, relativePath);
  const nb = JSON.parse(fs.readFileSync(inputPath));
  const language = nb.metadata.kernelspec.language;
	var src = "";
  var found = false;
  for (cell of nb.cells) {
    if (cell.metadata.tags !== undefined && cell.metadata.tags.includes(tag)) {
			if (cell.source === undefined) {
				continue;
			}
      found = true;
			if (cell.cell_type === "code") {
				src += `\n\n\`\`\` ${language}
${cell.source.join("")}
\`\`\`\n
`;
			} else {
				src += `\n\n${cell.source.join("")}\n\n`;
			}
    }
  }
  if (!found) {
    console.warn(`Could not find any cell with tag ${tag} in ${inputPath}!`);
    return "";
  }
  return src;
};

function readTextOutputForTag(tag, dirname, relativePath) {
  const inputPath = path.join(dirname, relativePath);
  const nb = JSON.parse(fs.readFileSync(inputPath));

  var outputs = ""
  for (cell of nb.cells) {
    if (cell.metadata.tags !== undefined && cell.metadata.tags.includes(tag)) {
      for (out of cell.outputs) {
        if (out.output_type === "stream") {
          outputs += "\n```" + ` ${out.name}\n${out.text.join("").trim()}\n` + "```\n"
        }
        else if (out.output_type === "display_data") {
					if (out.data === undefined) {
						continue;
					}
					for (const [key, value] of Object.entries(out.data)) {
						switch (key) {
							case "text/plain":
								outputs += "\n\n``` plain\n" + `${value.join("").trim()}` + "\n```\n"
								break;
							case "text/markdown":
								outputs += `\n\n${value.join("").trim()}\n\n`
								break;
							case "text/html":
								outputs += `\n\n${value.join("").trim()}\n\n`
								break;
							case "application/json":
								outputs += "\n\n``` json\n" + `${value.join("").trim()}` + "\n```\n"
								break;
							default:
								console.log(`JNB: Unsupported text output MIME type "${key}" for tag "${tag}"`)
						}
					}
        }
      }
    }
  }
  if (outputs === "") {
    console.warn(`Could not find any text output for cell with tag ${tag} in ${inputPath}!`);
  }
  return outputs;
}

function readImageOutputForTag(tag, altText, caption, dirname, relativePath, inputdir) {
	if (inputdir === undefined) {
		throw new Error("Input directory is undefined");
	}
  const inputPath = path.join(dirname, relativePath);
  const nb = JSON.parse(fs.readFileSync(inputPath));

  const outdir = path.join(`/${TMP_DIR}`, dirname);
  const writedir = path.join(inputdir, TMP_DIR, dirname);

  var figcaption = "";

  if (caption !== undefined) {
    figcaption = `<figcaption>${caption}</figcaption>`;
  }

  var outputs = "";

  var i = 0;
  for (cell of nb.cells) {
    if (cell.metadata.tags !== undefined && cell.metadata.tags.includes(tag)) {
      for (out of cell.outputs) {
				if (out.data === undefined) {
					continue;
				}
        for (const [key, value] of Object.entries(out.data)) {
          if (Object.keys(MIME_IMG_EXT).includes(key)) {
            var ext = MIME_IMG_EXT[key];
            var buf = new Buffer.from(value, 'base64');
            if (!fs.existsSync(writedir)) {
              fs.mkdirSync(writedir, { recursive: true });
            }
            var filename = `${tag}__${i}${ext}`
            filepath = path.join(outdir, filename);
            writepath = path.join(writedir, filename);
            fs.writeFileSync(writepath, buf);
            outputs += `
<figure>
	<img src="${filepath}" alt="${altText}">
	${figcaption}
</figure>
`
            i++;
          } else {
            // console.log("Unsupported output:")
            // console.log(key, value);
          }
        }
      }
    }
  }
  if (outputs === "") {
    console.warn(`Could not find any image for cell with tag ${tag} in ${inputPath}!`);
    return "";
  }
  return outputs;
}
